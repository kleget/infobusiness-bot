import small_func
from importt import *
from pay import *
from db_manage import *


@dp.message_handler(commands=['start'])
async def start_com(message: types.Message):
    await inicialization(message.chat.id)  # –î–û–ë–ê–í–õ–Ø–ï–Æ –Æ–ó–ï–†–ê –ê –ë–î
    await db_update_one_pole('main', 'promo_code', message.chat.id, 'False')
    await bot.send_message(chat_id=-1001924145374,
                           text=f"*chat id:* `{message.chat.id}`\n*link:* {message.chat.mention}\n*msg id:* `{message.message_id}`\n*text:* {message.text}",
                           reply_to_message_id=2, parse_mode="MarkdownV2")
    if message.chat.id == ID_ADMIN:
        s = await db_select_all_pole('params', '1277447609')
        s_name = [i for i in s[0][1:21] if i != 'pass']
        s_price = [i for i in s[0][21:41] if i != 'pass']
        s_text = [i for i in s[0][41:61] if i != 'pass']
        s_audio = [i for i in s[0][61:81] if i != 'pass']
        button_list = [
            types.InlineKeyboardButton(
                text=f"{s_name[x]} ‚è≥ {s_audio[x].split('::')[1]} {'üéÅ ' if s_price[x] == '0' else ''}[{s_price[x]}‚ÇΩ]",
                callback_data=str(f"audio:{num_dict[x]}")
            ) for x in range(len(s_name))
        ]
        link_on_chanel = InlineKeyboardButton('–ù–∞—à –∫–∞–Ω–∞–ª', url='https://t.me/audioaptechka')
        support = InlineKeyboardButton('–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
        question = InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='question')
        offer = InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='offer')
        admin_panel = InlineKeyboardButton('–ê–¥–º–∏–Ω–∫–∞', callback_data='admin_panel')
        keyboard = InlineKeyboardMarkup(row_width=1).add(*button_list, link_on_chanel, support, question, offer, admin_panel)
    else:
        s = await db_select_all_pole('params', '1277447609')
        s_name = [i for i in s[0][1:21] if i != 'pass']
        s_price = [i for i in s[0][21:41] if i != 'pass']
        s_text = [i for i in s[0][41:61] if i != 'pass']
        s_audio = [i for i in s[0][61:81] if i != 'pass']
        button_list = [
            types.InlineKeyboardButton(
                text=f"{s_name[x]} ‚è≥ {s_audio[x].split('::')[1]} {'üéÅ ' if s_price[x] == '0' else ''}[{s_price[x]}‚ÇΩ]",
                callback_data=str(f"audio:{num_dict[x]}")
            ) for x in range(len(s_name))
        ]
        link_on_chanel = InlineKeyboardButton('–ù–∞—à –∫–∞–Ω–∞–ª', url='https://t.me/audioaptechka')
        support = InlineKeyboardButton('–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
        question = InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='question')
        offer = InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='offer')
        keyboard = InlineKeyboardMarkup(row_width=1).add(*button_list, link_on_chanel, support, question, offer)
    await bot.send_message(
        chat_id=message.chat.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ç–∞–±–ª–µ—Ç–∫—É:',
        reply_markup=keyboard,
        parse_mode="MarkdownV2")


#–û–¢–ü–†–í–ö–ê –ê–£–î–ò–û –§–ê–õ–ô–õ–ê –ò–õ–ò –ü–†–û–°–¨–ë–û –û–ü–õ–ê–¢–ò–¢–¨
@dp.callback_query_handler(lambda c: c.data.startswith('audio'))
async def process_callback_pfffffffsd(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await process_callback_params_any_2(callback_query)

# –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
@dp.callback_query_handler(lambda c: c.data.startswith('admin_panel'))
async def process_callback_pdddddd(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    stat = InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='static')
    rasssilka = InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞', callback_data='rassilka')
    add_audio = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å', callback_data='add_audio')
    manager_promocode = InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', callback_data='manager_promocode')
    keyb = InlineKeyboardMarkup(row_width=1).add(stat, rasssilka, add_audio, manager_promocode)
    await bot.edit_message_text(chat_id=ID_ADMIN, text='–ê–¥–º–∏–Ω–∫–∞:', reply_markup=keyb, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('support'))
async def process_callback_support(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await db_update_one_pole('main', 'support', callback_query.from_user.id, 'support')
    await bot.send_message(chat_id=callback_query.from_user.id, text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Å–≤—è–∑–∏. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –º—ã —Ä–µ—à–∏–º –ª—é–±–æ–π –ø—Ä–æ–±–ª–µ–º—É –∏ –≤—Å–µ –æ–±—ä—è—Å–Ω–∏–º. ')

@dp.callback_query_handler(lambda c: c.data.startswith('offer'))
async def process_callback_offer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await db_update_one_pole('main', 'support', callback_query.from_user.id, 'offer')
    await bot.send_message(chat_id=callback_query.from_user.id, text='–ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ª—é–±–æ–µ –ø—Ä–µ–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –∞—É–¥–∏–æ —Ç–∞–±–ª–µ—Ç–∫–∏, —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –¥–∞–∂–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ')

@dp.callback_query_handler(lambda c: c.data.startswith('question'))
async def process_callback_question(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await db_update_one_pole('main', 'support', callback_query.from_user.id, 'question')
    await bot.send_message(chat_id=callback_query.from_user.id, text='–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≥–∏–ø–Ω–æ–∞—É–¥–∏–æ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É.')


@dp.callback_query_handler(lambda c: c.data.startswith('add_audio'))
async def process_callback_asdf(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(chat_id=ID_ADMIN, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    await db_update_one_pole('ras', 'action', ID_ADMIN, 'set_name')

@dp.callback_query_handler(lambda c: c.data.startswith('manager_promocode'))
async def process_callback_manager_code(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    status_promocodes = InlineKeyboardButton('–°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data='status_promocodes')
    get_one_code = InlineKeyboardButton('–í—ã–¥–∞—Ç—å —Ä–∞–∑–æ–≤—ã–π –∫–æ–¥', callback_data='get_one_code')
    keyb = InlineKeyboardMarkup(row_width=1).add(status_promocodes, get_one_code)
    await bot.edit_message_text(chat_id=ID_ADMIN, text='–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤–∫–ª/–≤—ã–∫–ª\n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', reply_markup=keyb, message_id=callback_query.message.message_id)



@dp.callback_query_handler(lambda c: c.data.startswith('status_promocodes'))
async def process_callback_manager_code(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    s = await db_select_all_pole('params', ID_ADMIN)
    s_name = [i for i in s[0][1:21] if i != 'pass']
    s_price = [i for i in s[0][21:41] if i != 'pass']
    button_list = [
        types.InlineKeyboardButton(
            text=f"{s_name[x]} [{s_price[x]}‚ÇΩ]",
            callback_data=str(f"mng_code_audio_1:{num_dict[x]}")
        ) for x in range(len(s_name))
    ]

    keyboard = InlineKeyboardMarkup(row_width=1).add(*button_list)
    await bot.edit_message_text(chat_id=ID_ADMIN, text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', reply_markup=keyboard, message_id=callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith('get_one_code'))
async def process_callback_manager_code(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await db_update_one_pole('ras', 'action', ID_ADMIN, 'get_user_link')
    await bot.edit_message_text(chat_id=ID_ADMIN,
                                text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –±–æ—Ç–∞ @username_to_id_bot —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.\n'
                                     '–±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –æ—Ç–≤–µ—Ç, –≥–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å id –≤ –≤–∏–¥–µ 1234567890 –∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—é–¥–∞ –≤ —á–∞—Ç',
                                message_id=callback_query.message.message_id)




@dp.callback_query_handler(lambda c: c.data.startswith('mng_code_audio_1'))
async def process_callback_sdfsa(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    audio = callback_query.data.split(':')

    s = await db_select_all_pole('promocode', ID_ADMIN)
    s_procent = [30, 50, 70, 100]
    s_price = [i for i in s[0][21:41] if i != 'pass']
    button_list = [
        types.InlineKeyboardButton(
            text=f"{s_procent[x]} %",
            callback_data=str(f"mng_code_audio_2:{audio[1]}:{s_procent[x]}")
        ) for x in range(len(s_procent))
    ]

    keyboard = InlineKeyboardMarkup(row_width=1).add(*button_list)

    audi = await db_select_one_pole('params', audio[1], ID_ADMIN)
    await bot.edit_message_text(chat_id=ID_ADMIN, text=audi[0], reply_markup=keyboard, message_id=callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith('mng_code_audio_2'))
async def process_callback_sdfsa(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    audio = callback_query.data.split(':')
    code = codes_2[(num_dict_2[audio[1]]-1)*4 + num_dict_3[int(audio[2])]-1]
    cx = await db_select_one_pole('promocode', f'{audio[1]}_{audio[2]}_promocode', ID_ADMIN)
    audi = await db_select_one_pole('params', audio[1], ID_ADMIN)
    if cx[0] == 'True':
        but = InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å ‚úÖ', callback_data=f'on:{audio[1]}_{audio[2]}_promocode:{code}:{audio[1]}:{audio[2]}')
    elif cx[0] == 'False':
        but = InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ‚ùå', callback_data=f'off:{audio[1]}_{audio[2]}_promocode:{code}:{audio[1]}:{audio[2]}')
    keyb = InlineKeyboardMarkup(row_width=1).add(but)

    txt = f'–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ "*{audi[0]}*" –Ω–∞ —Å–∫–∏–¥–∫—É {audio[2]}%\n`{code}` \n{condition[cx[0]]}'
    await bot.edit_message_text(chat_id=ID_ADMIN, text=txt, reply_markup=keyb, parse_mode='MarkdownV2', message_id=callback_query.message.message_id)



@dp.callback_query_handler(lambda c: c.data.startswith('on'))
async def static_function(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    var = callback_query.data.split(':')
    await db_update_one_pole('promocode', var[1], ID_ADMIN, 'True')
    # on = InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å ‚úÖ', callback_data=f'on:{var[1]}:{var[2]}')
    off = InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ‚ùå', callback_data=f'off:{var[1]}:{var[2]}:{var[3]}:{var[4]}:')
    keyb = InlineKeyboardMarkup(row_width=1).add(off)
    audi = await db_select_one_pole('params', var[3], ID_ADMIN)
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                text=f'–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ "*{audi[0]}*" –Ω–∞ —Å–∫–∏–¥–∫—É {var[4]}%\n`{var[2]}`\n–ü—Ä–æ–º–æ–∫–æ–¥ –≤–∫–ª—é—á–µ–Ω ‚úÖ',
                                message_id=callback_query.message.message_id,
                                reply_markup=keyb,
                                parse_mode='MarkdownV2')

@dp.callback_query_handler(lambda c: c.data.startswith('off'))
async def static_function(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    var = callback_query.data.split(':')
    await db_update_one_pole('promocode', var[1], ID_ADMIN, 'False')
    on = InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å ‚úÖ', callback_data=f'on:{var[1]}:{var[2]}:{var[3]}:{var[4]}:')
    # off = InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ‚ùå', callback_data=f'off:{var[1]}:{var[2]}')
    keyb = InlineKeyboardMarkup(row_width=1).add(on)
    # name = 123#await db_select_one_pole('params', var[1], ID_ADMIN)
    audi = await db_select_one_pole('params', var[3], ID_ADMIN)
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                text=f'–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ "*{audi[0]}*" –Ω–∞ —Å–∫–∏–¥–∫—É {var[4]}%\n`{var[2]}`\n–ü—Ä–æ–º–æ–∫–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω ‚ùå',
                                message_id=callback_query.message.message_id,
                                reply_markup=keyb,
                                parse_mode='MarkdownV2')


@dp.callback_query_handler(lambda c: c.data.startswith('static'))
async def static_function(callback_query: types.CallbackQuery):
    # await bot.answer_callback_query(callback_query.id)
    # count_users = await db_select_all_pole('main', callback_query.from_user.id)
    # count_users = count_users[0][1:20]
    # all_1 = []
    # all_2 = []
    # all_users = await db_select_id_sys('*') # –í–°–Ø –ò–ù–§–ê –ü–†–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    #
    # for i in range(len(all_users)):
    #     all_1.append(all_users[i][1])
    #     all_2.append(all_users[i][2])
    #
    # all_1 = all_1.count('True')
    # all_2 = all_2.count('True')
    # sum = ((all_1*5000) + (all_2*1000))
    await bot.send_message(chat_id=callback_query.from_user.id, text=f'–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')  # –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–æ—Ç–µ: {len(all_users)}\n–ü—Ä–æ–¥–∞–Ω–æ –Ω–∞ {sum} —Ä—É–±–ª–µ–π')


# –õ–û–§–ò–ú –§–û–¢–ö–£ –î–õ–Ø –†–ê–°–°–´–õ–ö–ò
@dp.message_handler(content_types=["photo"])
async def get_foto(message: types.Message):
    a = await get_rasslika()
    x = 0
    if a[0][0] == 'True':
        sub = await db_select_all_pole('main', 'chat_id')
        for i in range(len(sub)):
            try:
                await bot.send_photo(chat_id=sub[i][0], caption=message.caption, photo=message.photo[-1].file_id)
                # await bot.send_message(chat_id=sub[i][0], text=message.text)
                x += 1
            except:
                pass
        await bot.send_message(chat_id=ID_ADMIN, text=f'–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {x} —Å–æ–æ–±—â–µ–Ω–∏–π')
        await update_rasslika('False')


# –û–°–£–©–ï–°–¢–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò
@dp.message_handler()
async def ras(message: types.Message):
    a = await db_select_one_pole('ras', 'action', ID_ADMIN)
    sup = await db_select_one_pole('main', 'support', message.chat.id)
    if message.chat.id != -1001924145374:
        await bot.send_message(chat_id=-1001924145374, text=f"*chat id:* `{message.chat.id}`\n*link:* {message.chat.mention}\n*msg id:* `{message.message_id}`\n*text:* {message.text}", reply_to_message_id = 2, parse_mode="MarkdownV2")
    if message.chat.id == -1001924145374:
        await bot.send_message(chat_id=message.reply_to_message.md_text.split('\n')[0].split(' ')[2].split('`')[1],
                               text=message.text,
                               reply_to_message_id=message.reply_to_message.md_text.split('\n')[2].split(' ')[2].split('`')[1])
    elif sup[0] == 'support':
        await bot.send_message(chat_id=-1001924145374, text=f"*chat id:* `{message.chat.id}`\n*link:* {message.chat.mention}\n*msg id:* `{message.message_id}`\n*text:* {message.text}", reply_to_message_id = 13, parse_mode="MarkdownV2")
        await db_update_one_pole('main', 'support', message.chat.id, 'pass')
        await bot.send_message(chat_id=message.chat.id, text='–í–∞—à–µ —Å–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ. –í —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º.')
    elif sup[0] == 'offer':
        await bot.send_message(chat_id=-1001924145374,
                               text=f"*chat id:* `{message.chat.id}`\n*link:* {message.chat.mention}\n*msg id:* `{message.message_id}`\n*text:* {message.text}",
                               reply_to_message_id=11, parse_mode="MarkdownV2")
        await db_update_one_pole('main', 'support', message.chat.id, 'pass')
        await bot.send_message(chat_id=message.chat.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–ª–æ–∂–Ω–∏–µ. –í —Å–ª—É—á–∞–µ —á–µ–≥–æ, –º—ã –º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç')
    elif sup[0] == 'question':
        await bot.send_message(chat_id=-1001924145374,
                               text=f"*chat id:* `{message.chat.id}`\n*link:* {message.chat.mention}\n*msg id:* `{message.message_id}`\n*text:* {message.text}",
                               reply_to_message_id=9, parse_mode="MarkdownV2")
        await db_update_one_pole('main', 'support', message.chat.id, 'pass')
        await bot.send_message(chat_id=message.chat.id, text='–°–æ–æ–±—â–µ–Ω–µ–∏ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≥–∏–ø–Ω–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É, –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è –≤–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç –æ—Ç–≤–µ—Ç –≤ –±–æ—Ç. –û–∂–∏–¥–∞–π—Ç–µ.')

    elif message.chat.id == ID_ADMIN and a[0] in ['rassilka', 'set_name', 'set_price', 'set_text', 'get_user_link', 'set_procents_for_one_link']:
        if a[0][0] == 'rassilka':
            x = 0
            sub = await db_select_all_pole('params', 'chat_id')
            for i in range(len(sub)):
                try:
                    await bot.send_message(chat_id=sub[i][0], text=message.text)
                    x += 1
                except:
                    pass
            await bot.send_message(chat_id=ID_ADMIN, text=f'–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {x} —Å–æ–æ–±—â–µ–Ω–∏–π')
            await update_rasslika('False')
        elif a[0] == 'set_name':
            all_params = await db_select_all_pole('params', ID_ADMIN)
            all_params = all_params[0][1:21]
            for i in range(len(all_params)):
                if all_params[i] == 'pass':
                    await db_update_one_pole('params', num_dict[i], ID_ADMIN, message.text)
                    break
            await bot.send_message(chat_id=ID_ADMIN, text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É')
            await db_update_one_pole('ras', 'action', ID_ADMIN, 'set_price')
        elif a[0] == 'set_price':
            all_params = await db_select_all_pole('params', ID_ADMIN)
            all_params = all_params[0][21:41]
            for i in range(len(all_params)):
                if all_params[i] == 'pass':
                    await db_update_one_pole('params', f"price_{num_dict[i]}", ID_ADMIN, message.text)
                    break
            await bot.send_message(chat_id=ID_ADMIN, text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
            await db_update_one_pole('ras', 'action', ID_ADMIN, 'set_text')
        elif a[0] == 'set_text':
            all_params = await db_select_all_pole('params', ID_ADMIN)
            all_params = all_params[0][41:61]
            for i in range(len(all_params)):
                if all_params[i] == 'pass':
                    await db_update_one_pole('params', f"text_{num_dict[i]}", ID_ADMIN, message.text)
                    break
            await bot.send_message(chat_id=ID_ADMIN, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ')
            await db_update_one_pole('ras', 'action', ID_ADMIN, 'set_audio')
        elif a[0] == 'get_user_link':
            await bot.send_message(chat_id=ID_ADMIN, text='–°–∫–æ–ª—å–∫–æ % —Å–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É? –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –¥—Ä—É–≥–∏—Ö –∑–Ω–∞–∫–æ–≤')
            await db_update_one_pole('ras', 'action', ID_ADMIN, 'set_procents_for_one_link')
            await db_update_one_pole('ras', 'user_link', ID_ADMIN, message.text)
        elif a[0] == 'set_procents_for_one_link':
            await db_update_one_pole('ras', 'procent', ID_ADMIN, message.text)
            s = await db_select_all_pole('params', ID_ADMIN)
            s_name = [i for i in s[0][1:21] if i != 'pass']
            s_price = [i for i in s[0][21:41] if i != 'pass']
            button_list = [
                types.InlineKeyboardButton(
                    text=f"{s_name[x]} [{s_price[x]}‚ÇΩ]",
                    callback_data=str(f"get_code_for_user:{num_dict[x]}")
                ) for x in range(len(s_name))
            ]

            keyboard = InlineKeyboardMarkup(row_width=1).add(*button_list)
            await bot.send_message(chat_id=ID_ADMIN, text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.',reply_markup=keyboard)
            await db_update_one_pole('ras', 'action', ID_ADMIN, 'set_procents_for_one_link')
    else:
        c = await db_select_all_pole('main', message.chat.id)
        yt = await db_select_all_pole('params', message.chat.id)
        code_one_use = await db_select_all_pole('onecode', message.chat.id)
        arr = []
        for i in range(len(code_one_use)):
            arr.append(code_one_use[i][1])
        if '_' not in message.text:
            try:
                status_promocode = await db_select_one_pole('promocode',
                                                            f"{c[0][2]}_{int(codes[message.text] * 100)}_promocode",
                                                            message.chat.id)
                if c[0][1] == 'True' and message.text in codes_2 and status_promocode[0] == 'True':
                    await ras_2(message, c[0][2])
                elif status_promocode[0] == 'False':
                    await bot.send_message(chat_id=message.chat.id,
                                           text='–ü—Ä–æ–º–æ–∫–æ–¥ —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò–º –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ –æ–±—ä—è–≤–ª—è—Ç —Å–∫–∏–¥–∫—É –ø–æ –Ω–µ–º—É.')
                elif c[0][1] == 'True':
                    await bot.send_message(chat_id=message.chat.id,
                                           text='–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞.')
                else:
                    pass
            except:
                await bot.send_message(chat_id=message.chat.id,
                                       text='–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞.')

        elif c[0][1] == 'True' and message.text in arr:
            for i in range(len(code_one_use)):
                if code_one_use[i][1] == message.text and code_one_use[i][2] == 'True':
                    await ras_4(message, c[0][2])
                    break


@dp.callback_query_handler(lambda c: c.data.startswith('rassilka'))
async def rasilca_function(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    # sub = await db_select_id_sys('chat_id')
    await update_rasslika('True')
    back = InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='back')
    keyb = InlineKeyboardMarkup(row_width=1).add(back)
    await bot.send_message(chat_id=ID_ADMIN, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –æ–Ω–æ –ø—Ä–∏–¥—ë—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞', reply_markup=keyb)


@dp.callback_query_handler(lambda c: c.data.startswith('get_code_for_user'))
async def get_code_for_user_func(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    # var = callback_query.data.split(':')
    # await update_rasslika('True')
    # back = InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='back')
    # keyb = InlineKeyboardMarkup(row_width=1).add(back)
    a = await db_select_all_pole('ras', ID_ADMIN)
    e = []
    for x in range(6):
        e.append(lists[random.randint(0, 24)])
    c = f"{''.join(e)}_{a[0][3]}%"
    await db_insert_two_pole('onecode', 'code', a[0][2], c)
    name = await db_select_one_pole('params', callback_query.data.split(":")[1], ID_ADMIN)
    await bot.send_message(chat_id=ID_ADMIN, text=f'–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É {a[0][3]}% –¥–ª—è –∑–∞–ø–∏—Å–∏ {name[0]} –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {a[0][2]}\n\n`{c}`', parse_mode="MarkdownV2")
    await db_update_one_pole('ras', 'action', ID_ADMIN, 'pass')



# –û–¢–õ–ê–í–õ–ò–í–ê–ù–ò–ï –ù–ê–ñ–ê–ù–ò–Ø –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î –ü–†–ò –í–´–ë–û–†–ï –†–ê–°–°–´–õ–ö–ò
@dp.callback_query_handler(lambda c: c.data.startswith('back'))
async def process_callback_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await update_rasslika('False')
    await bot.send_message(chat_id=callback_query.from_user.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)